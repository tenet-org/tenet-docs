"use strict";(self.webpackChunktenet_docs=self.webpackChunktenet_docs||[]).push([[4498],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),u=d(n),m=o,k=u["".concat(s,".").concat(m)]||u[m]||c[m]||l;return n?a.createElement(k,i(i({ref:t},p),{},{components:n})):a.createElement(k,i({ref:t},p))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,i=new Array(l);i[0]=m;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[u]="string"==typeof e?e:o,i[1]=r;for(var d=2;d<l;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2479:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>r,toc:()=>d});var a=n(7462),o=(n(7294),n(3905));const l={order:1,title:"Interacting with Tenetd (CLI)"},i="Interacting with Tenetd",r={unversionedId:"tutorials/cli",id:"tutorials/cli",title:"Interacting with Tenetd (CLI)",description:"Tenet Daemon",source:"@site/docs/node/tutorials/cli.md",sourceDirName:"tutorials",slug:"/tutorials/cli",permalink:"/tenet-docs/node/tutorials/cli",draft:!1,editUrl:"https://github.com/tenet-org/tenet-docs/edit/master/docs/node/tutorials/cli.md",tags:[],version:"current",frontMatter:{order:1,title:"Interacting with Tenetd (CLI)"},sidebar:"docsSidebar",previous:{title:"Multichain",permalink:"/tenet-docs/node/tutorials/upgrades/multichain"},next:{title:"Precompiles",permalink:"/tenet-docs/node/category/precompiles"}},s={},d=[{value:"Tenet Daemon",id:"tenet-daemon",level:2},{value:"Setting up tenetd",id:"setting-up-tenetd",level:3},{value:"Keys",id:"keys",level:3},{value:"Keyring",id:"keyring",level:4},{value:"Key Types",id:"key-types",level:4},{value:"Migrate Keys From Legacy On-Disk Keybase To OS Built-in Secret Store",id:"migrate-keys-from-legacy-on-disk-keybase-to-os-built-in-secret-store",level:4},{value:"Generate Keys",id:"generate-keys",level:4},{value:"Generate Multisig Public Keys",id:"generate-multisig-public-keys",level:4},{value:"Tx Broadcasting",id:"tx-broadcasting",level:3},{value:"Fees &amp; Gas",id:"fees--gas",level:3},{value:"Account",id:"account",level:3},{value:"Get Tokens",id:"get-tokens",level:4},{value:"Query Account Balance",id:"query-account-balance",level:4},{value:"Send Tokens",id:"send-tokens",level:3},{value:"Query Transactions",id:"query-transactions",level:3},{value:"Matching a Set of Events",id:"matching-a-set-of-events",level:4},{value:"Matching a Transaction&#39;s Hash",id:"matching-a-transactions-hash",level:4},{value:"Slashing",id:"slashing",level:3},{value:"Unjailing",id:"unjailing",level:4},{value:"Signing Info",id:"signing-info",level:4},{value:"Query Parameters",id:"query-parameters",level:4},{value:"Minting",id:"minting",level:3},{value:"Staking",id:"staking",level:3},{value:"Set up a Validator",id:"set-up-a-validator",level:4},{value:"Delegate to a Validator",id:"delegate-to-a-validator",level:4},{value:"Query Validators",id:"query-validators",level:5},{value:"Bond Tokens",id:"bond-tokens",level:4},{value:"Query Delegations",id:"query-delegations",level:5},{value:"Unbond Tokens",id:"unbond-tokens",level:4},{value:"Query Unbonding-Delegations",id:"query-unbonding-delegations",level:5},{value:"Redelegate Tokens",id:"redelegate-tokens",level:4},{value:"Query Redelegations",id:"query-redelegations",level:5},{value:"Query Parameters",id:"query-parameters-1",level:4},{value:"Query Pool",id:"query-pool",level:4},{value:"Query Delegations To Validator",id:"query-delegations-to-validator",level:5},{value:"Governance",id:"governance",level:3},{value:"Create a Governance Proposal",id:"create-a-governance-proposal",level:4},{value:"Query Proposals",id:"query-proposals",level:5},{value:"Increase Deposit",id:"increase-deposit",level:4},{value:"Query Deposits",id:"query-deposits",level:5},{value:"Vote on a Proposal",id:"vote-on-a-proposal",level:4},{value:"Query Votes",id:"query-votes",level:5},{value:"Query proposal tally results",id:"query-proposal-tally-results",level:4},{value:"Query Governance Parameters",id:"query-governance-parameters",level:4},{value:"Fee Distribution",id:"fee-distribution",level:3},{value:"Query Distribution Parameters",id:"query-distribution-parameters",level:4},{value:"Query distribution Community Pool",id:"query-distribution-community-pool",level:4},{value:"Query outstanding rewards",id:"query-outstanding-rewards",level:4},{value:"Query Validator Commission",id:"query-validator-commission",level:4},{value:"Query Validator Slashes",id:"query-validator-slashes",level:4},{value:"Query Delegator Rewards",id:"query-delegator-rewards",level:4},{value:"Query All Delegator Rewards",id:"query-all-delegator-rewards",level:4},{value:"Multisig Transactions",id:"multisig-transactions",level:3}],p={toc:d},u="wrapper";function c(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"interacting-with-tenetd"},"Interacting with Tenetd"),(0,o.kt)("h2",{id:"tenet-daemon"},"Tenet Daemon"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"tenetd")," is the tool that enables you to interact with the node that runs on the Tenet network, whether you run it yourself or not. Let us set it up properly. In order to install it, follow the ",(0,o.kt)("a",{parentName:"p",href:"../getting-started/installation.md"},"installation procedure"),"."),(0,o.kt)("h3",{id:"setting-up-tenetd"},"Setting up tenetd"),(0,o.kt)("p",null,"The main command used to set up ",(0,o.kt)("inlineCode",{parentName:"p"},"tenetd")," is the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd config <flag> <value>\n")),(0,o.kt)("p",null,"It allows you to set a default value for each given flag."),(0,o.kt)("p",null,"First, set up the address of the full-node you want to connect to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd config node <host>:<port>\n\n# example: tenetd config node https://77.87.106.33:26657\n")),(0,o.kt)("p",null,"If you run your own full-node, just use ",(0,o.kt)("inlineCode",{parentName:"p"},"tcp://localhost:26657")," as the address."),(0,o.kt)("p",null,"Finally, let us set the ",(0,o.kt)("inlineCode",{parentName:"p"},"chain-id")," of the blockchain we want to interact with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd config chain-id ...\n")),(0,o.kt)("h3",{id:"keys"},"Keys"),(0,o.kt)("h4",{id:"keyring"},"Keyring"),(0,o.kt)("p",null,'The keyring holds the private/public keypairs used to interact with a node. For instance, a validator key needs to be set up before running the blockchain node, so that blocks can be correctly signed. The private key can be stored in different locations, called "backends", such as a file or the operating system\'s own key storage.'),(0,o.kt)("p",null,"Headless environments are recommended to use either the ",(0,o.kt)("inlineCode",{parentName:"p"},"file")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"pass")," backends. More information is available at the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.cosmos.network/main/run-node/keyring.html"},"SDK documentation page"),"."),(0,o.kt)("h4",{id:"key-types"},"Key Types"),(0,o.kt)("p",null,"There are three types of key representations that are used:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"tenet")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Derived from account keys generated by ",(0,o.kt)("inlineCode",{parentName:"li"},"tenetd keys add")),(0,o.kt)("li",{parentName:"ul"},"Used to receive funds"),(0,o.kt)("li",{parentName:"ul"},"e.g. ",(0,o.kt)("inlineCode",{parentName:"li"},"tenet15h6vd5f0wqps26zjlwrc6chah08ryu4hzzdwhc")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"tenetvaloper")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Used to associate a validator to its operator"),(0,o.kt)("li",{parentName:"ul"},"Used to invoke staking commands"),(0,o.kt)("li",{parentName:"ul"},"e.g. ",(0,o.kt)("inlineCode",{parentName:"li"},"tenetvaloper1carzvgq3e6y3z5kz5y6gxp3wpy3qdrv928vyah")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"tenetpub")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Derived from account keys generated by ",(0,o.kt)("inlineCode",{parentName:"li"},"tenetd keys add")),(0,o.kt)("li",{parentName:"ul"},"e.g. ",(0,o.kt)("inlineCode",{parentName:"li"},"tenetpub1zcjduc3q7fu03jnlu2xpl75s2nkt7krm6grh4cc5aqth73v0zwmea25wj2hsqhlqzm")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"tenetvalconspub")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Generated when the node is created with ",(0,o.kt)("inlineCode",{parentName:"li"},"tenetd init"),"."),(0,o.kt)("li",{parentName:"ul"},"Get this value with ",(0,o.kt)("inlineCode",{parentName:"li"},"tenetd tendermint show-validator")),(0,o.kt)("li",{parentName:"ul"},"e.g. ",(0,o.kt)("inlineCode",{parentName:"li"},"tenetvalconspub1zcjduepq0ms2738680y72v44tfyqm3c9ppduku8fs6sr73fx7m666sjztznqzp2emf"))))),(0,o.kt)("h4",{id:"migrate-keys-from-legacy-on-disk-keybase-to-os-built-in-secret-store"},"Migrate Keys From Legacy On-Disk Keybase To OS Built-in Secret Store"),(0,o.kt)("p",null,"Older versions of ",(0,o.kt)("inlineCode",{parentName:"p"},"tenetd")," used store keys in the user's home directory. If you are migrating\nfrom an old version of ",(0,o.kt)("inlineCode",{parentName:"p"},"tenetd")," you will need to migrate your old keys into your operating system's\ncredentials storage by running the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd keys migrate\n")),(0,o.kt)("p",null,"The command will prompt for every passphrase. If a passphrase is incorrect, it will skip the\nrespective key."),(0,o.kt)("h4",{id:"generate-keys"},"Generate Keys"),(0,o.kt)("p",null,"You'll need an account private and public key pair ","(","a.k.a. ",(0,o.kt)("inlineCode",{parentName:"p"},"sk, pk")," respectively",")"," to be able to receive funds, send txs, bond tx, etc."),(0,o.kt)("p",null,"To generate a new ",(0,o.kt)("em",{parentName:"p"},"secp256k1")," key:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd keys add <account_name>\n")),(0,o.kt)("p",null,"The output of the above command will contain a ",(0,o.kt)("em",{parentName:"p"},"seed phrase"),". It is recommended to save the ",(0,o.kt)("em",{parentName:"p"},"seed\nphrase")," in a safe place so that in case you forget the password of the operating system's\ncredentials store, you could eventually regenerate the key from the seed phrase with the\nfollowing command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd keys add --recover\n")),(0,o.kt)("p",null,"If you check your private keys, you'll now see ",(0,o.kt)("inlineCode",{parentName:"p"},"<account_name>"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd keys show <account_name>\n")),(0,o.kt)("p",null,"View the validator operator's address via:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd keys show <account_name> --bech=val\n")),(0,o.kt)("p",null,"You can see all your available keys by typing:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd keys list\n")),(0,o.kt)("p",null,"View the validator pubkey for your node by typing:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd tendermint show-validator\n")),(0,o.kt)("p",null,"Note that this is the Tendermint signing key, ",(0,o.kt)("em",{parentName:"p"},"not")," the operator key you will use in delegation transactions."),(0,o.kt)("p",null,"::: danger Warning\nWe strongly recommend ",(0,o.kt)("em",{parentName:"p"},"NOT")," using the same passphrase for multiple keys. The CometBFT team and the Interchain Foundation will not be responsible for the loss of funds.\n:::"),(0,o.kt)("h4",{id:"generate-multisig-public-keys"},"Generate Multisig Public Keys"),(0,o.kt)("p",null,"You can generate and print a multisig public key by typing:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd keys add --multisig=name1,name2,name3[...] --multisig-threshold=K new_key_name\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"K")," is the minimum number of private keys that must have signed the\ntransactions that carry the public key's address as signer."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"--multisig")," flag must contain the name of public keys that will be combined into a\npublic key that will be generated and stored as ",(0,o.kt)("inlineCode",{parentName:"p"},"new_key_name")," in the local database.\nAll names supplied through ",(0,o.kt)("inlineCode",{parentName:"p"},"--multisig")," must already exist in the local database. Unless\nthe flag ",(0,o.kt)("inlineCode",{parentName:"p"},"--nosort")," is set, the order in which the keys are supplied on the command line\ndoes not matter, i.e. the following commands generate two identical keys:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd keys add --multisig=foo,bar,baz --multisig-threshold=2 multisig_address\ntenetd keys add --multisig=baz,foo,bar --multisig-threshold=2 multisig_address\n")),(0,o.kt)("p",null,"Multisig addresses can also be generated on-the-fly and printed through the which command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd keys show --multisig-threshold K name1 name2 name3 [...]\n")),(0,o.kt)("p",null,"For more information regarding how to generate, sign and broadcast transactions with a\nmulti signature account see ",(0,o.kt)("a",{parentName:"p",href:"#multisig-transactions"},"Multisig Transactions"),"."),(0,o.kt)("h3",{id:"tx-broadcasting"},"Tx Broadcasting"),(0,o.kt)("p",null,"When broadcasting transactions, ",(0,o.kt)("inlineCode",{parentName:"p"},"tenetd")," accepts a ",(0,o.kt)("inlineCode",{parentName:"p"},"--broadcast-mode")," flag. This\nflag can have a value of ",(0,o.kt)("inlineCode",{parentName:"p"},"sync")," (default), ",(0,o.kt)("inlineCode",{parentName:"p"},"async"),", or ",(0,o.kt)("inlineCode",{parentName:"p"},"block"),", where ",(0,o.kt)("inlineCode",{parentName:"p"},"sync")," makes\nthe client return a CheckTx response, ",(0,o.kt)("inlineCode",{parentName:"p"},"async")," makes the client return immediately,\nand ",(0,o.kt)("inlineCode",{parentName:"p"},"block")," makes the client wait for the tx to be committed (or timing out)."),(0,o.kt)("p",null,"It is important to note that the ",(0,o.kt)("inlineCode",{parentName:"p"},"block")," mode should ",(0,o.kt)("strong",{parentName:"p"},"not")," be used in most\ncircumstances. This is because broadcasting can timeout but the tx may still be\nincluded in a block. This can result in many undesirable situations. Therefore, it\nis best to use ",(0,o.kt)("inlineCode",{parentName:"p"},"sync")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"async")," and query by tx hash to determine when the tx\nis included in a block."),(0,o.kt)("h3",{id:"fees--gas"},"Fees & Gas"),(0,o.kt)("p",null,"Each transaction may either supply fees or gas prices, but not both."),(0,o.kt)("p",null,"Validator's have a minimum gas price (multi-denom) configuration and they use\nthis value when determining if they should include the transaction in a block during ",(0,o.kt)("inlineCode",{parentName:"p"},"CheckTx"),", where ",(0,o.kt)("inlineCode",{parentName:"p"},"gasPrices >= minGasPrices"),". Note, your transaction must supply fees that are greater than or equal to ",(0,o.kt)("strong",{parentName:"p"},"any")," of the denominations the validator requires."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note"),": With such a mechanism in place, validators may start to prioritize\ntxs by ",(0,o.kt)("inlineCode",{parentName:"p"},"gasPrice")," in the mempool, so providing higher fees or gas prices may yield higher tx priority."),(0,o.kt)("p",null,"e.g."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd tx bank send ... --fees=50000atenet\n")),(0,o.kt)("p",null,"or"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd tx bank send ... --gas-prices=0.0025atenet\n")),(0,o.kt)("h3",{id:"account"},"Account"),(0,o.kt)("h4",{id:"get-tokens"},"Get Tokens"),(0,o.kt)("p",null,"On a testnet, getting tokens is usually done via a faucet."),(0,o.kt)("h4",{id:"query-account-balance"},"Query Account Balance"),(0,o.kt)("p",null,"After receiving tokens to your address, you can view your account's balance by typing:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query account <account_tenet>\n")),(0,o.kt)("p",null,"::: warning Note\nWhen you query an account balance with zero tokens, you will get this error: ",(0,o.kt)("inlineCode",{parentName:"p"},"No account with address <account_tenet> was found in the state.")," This can also happen if you fund the account before your node has fully synced with the chain. These are both normal."),(0,o.kt)("p",null,":::"),(0,o.kt)("h3",{id:"send-tokens"},"Send Tokens"),(0,o.kt)("p",null,"The following command could be used to send coins from one account to another:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd tx bank send <sender_key_name_or_address> <recipient_address> 10faucetToken \\\n  --chain-id=<chain_id>\n")),(0,o.kt)("p",null,"::: warning Note\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"amount")," argument accepts the format ",(0,o.kt)("inlineCode",{parentName:"p"},"<value|coin_name>"),".\n:::"),(0,o.kt)("p",null,"::: tip Note\nYou may want to cap the maximum gas that can be consumed by the transaction via the ",(0,o.kt)("inlineCode",{parentName:"p"},"--gas")," flag.\nIf you pass ",(0,o.kt)("inlineCode",{parentName:"p"},"--gas=auto"),", the gas supply will be automatically estimated before executing the transaction.\nGas estimate might be inaccurate as state changes could occur in between the end of the simulation and the actual execution of a transaction, thus an adjustment is applied on top of the original estimate in order to ensure the transaction is broadcasted successfully. The adjustment can be controlled via the ",(0,o.kt)("inlineCode",{parentName:"p"},"--gas-adjustment")," flag, whose default value is 1.0.\n:::"),(0,o.kt)("p",null,"Now, view the updated balances of the origin and destination accounts:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query account <account_tenet>\ntenetd query account <destination_tenet>\n")),(0,o.kt)("p",null,"You can also check your balance at a given block by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"--block")," flag:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query account <account_tenet> --block=<block_height>\n")),(0,o.kt)("p",null,"You can simulate a transaction without actually broadcasting it by appending the\n",(0,o.kt)("inlineCode",{parentName:"p"},"--dry-run")," flag to the command line:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd tx bank send <sender_key_name_or_address> <destination_tenetaccaddr> 10faucetToken \\\n  --chain-id=<chain_id> \\\n  --dry-run\n")),(0,o.kt)("p",null,"Furthermore, you can build a transaction and print its JSON format to STDOUT by\nappending ",(0,o.kt)("inlineCode",{parentName:"p"},"--generate-only")," to the list of the command line arguments:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd tx bank send <sender_address> <recipient_address> 10faucetToken \\\n  --chain-id=<chain_id> \\\n  --generate-only > unsignedSendTx.json\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd tx sign \\\n  --chain-id=<chain_id> \\\n  --from=<key_name> \\\n  unsignedSendTx.json > signedSendTx.json\n")),(0,o.kt)("p",null,"::: tip Note\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"--generate-only")," flag prevents ",(0,o.kt)("inlineCode",{parentName:"p"},"tenetd")," from accessing the local keybase.\nThus when such flag is supplied ",(0,o.kt)("inlineCode",{parentName:"p"},"<sender_key_name_or_address>")," must be an address.\n:::"),(0,o.kt)("p",null,"You can validate the transaction's signatures by typing the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd tx sign --validate-signatures signedSendTx.json\n")),(0,o.kt)("p",null,"You can broadcast the signed transaction to a node by providing the JSON file to the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd tx broadcast --node=<node> signedSendTx.json\n")),(0,o.kt)("h3",{id:"query-transactions"},"Query Transactions"),(0,o.kt)("h4",{id:"matching-a-set-of-events"},"Matching a Set of Events"),(0,o.kt)("p",null,"You can use the transaction search command to query for transactions that match a\nspecific set of ",(0,o.kt)("inlineCode",{parentName:"p"},"events"),", which are added on every transaction."),(0,o.kt)("p",null,"Each event is composed by a key-value pair in the form of ",(0,o.kt)("inlineCode",{parentName:"p"},"{eventType}.{eventAttribute}={value}"),".\nEvents can also be combined to query for a more specific result using the ",(0,o.kt)("inlineCode",{parentName:"p"},"&")," symbol."),(0,o.kt)("p",null,"You can query transactions by ",(0,o.kt)("inlineCode",{parentName:"p"},"events")," as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query txs --events='message.sender=tenet1...'\n")),(0,o.kt)("p",null,"And for using multiple ",(0,o.kt)("inlineCode",{parentName:"p"},"events"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query txs --events='message.sender=tenet1...&message.action=withdraw_delegator_reward'\n")),(0,o.kt)("p",null,"The pagination is supported as well via ",(0,o.kt)("inlineCode",{parentName:"p"},"page")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"limit"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query txs --events='message.sender=tenet1...' --page=1 --limit=20\n")),(0,o.kt)("p",null,"::: tip Note"),(0,o.kt)("p",null,"The action tag always equals the message type returned by the ",(0,o.kt)("inlineCode",{parentName:"p"},"Type()")," function of the relevant message."),(0,o.kt)("p",null,"You can find a list of available ",(0,o.kt)("inlineCode",{parentName:"p"},"events")," on each of the SDK modules:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/cosmos/cosmos-sdk/tree/main/x/staking#events"},"Staking events")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/cosmos/cosmos-sdk/tree/main/x/gov#events"},"Governance events")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/cosmos/cosmos-sdk/tree/main/x/slashing#events"},"Slashing events")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/cosmos/cosmos-sdk/tree/main/x/distribution#events"},"Distribution events")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/cosmos/cosmos-sdk/tree/main/x/bank#events"},"Bank events"),"\n:::")),(0,o.kt)("h4",{id:"matching-a-transactions-hash"},"Matching a Transaction's Hash"),(0,o.kt)("p",null,"You can also query a single transaction by its hash using the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query tx [hash]\n")),(0,o.kt)("h3",{id:"slashing"},"Slashing"),(0,o.kt)("h4",{id:"unjailing"},"Unjailing"),(0,o.kt)("p",null,"To unjail your jailed validator"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd tx slashing unjail --from <validator-operator-addr>\n")),(0,o.kt)("h4",{id:"signing-info"},"Signing Info"),(0,o.kt)("p",null,"To retrieve a validator's signing info:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query slashing signing-info <validator-pubkey>\n")),(0,o.kt)("h4",{id:"query-parameters"},"Query Parameters"),(0,o.kt)("p",null,"You can get the current slashing parameters via:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query slashing params\n")),(0,o.kt)("h3",{id:"minting"},"Minting"),(0,o.kt)("p",null,"You can query for the minting/inflation parameters via:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query mint params\n")),(0,o.kt)("p",null,"To query for the current inflation value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query mint inflation\n")),(0,o.kt)("p",null,"To query for the current annual provisions value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query mint annual-provisions\n")),(0,o.kt)("h3",{id:"staking"},"Staking"),(0,o.kt)("h4",{id:"set-up-a-validator"},"Set up a Validator"),(0,o.kt)("p",null,"Please refer to the ",(0,o.kt)("a",{parentName:"p",href:"../validators/validator-setup.md"},"Validator Setup")," section for a more complete guide on how to set up a validator-candidate."),(0,o.kt)("h4",{id:"delegate-to-a-validator"},"Delegate to a Validator"),(0,o.kt)("p",null,"On the upcoming mainnet, you can delegate ",(0,o.kt)("inlineCode",{parentName:"p"},"atenet")," to a validator. These ",(0,o.kt)("a",{parentName:"p",href:"../delegators/delegator-faq.md"},"delegators")," can receive part of the validator's fee revenue."),(0,o.kt)("h5",{id:"query-validators"},"Query Validators"),(0,o.kt)("p",null,"You can query the list of all validators of a specific chain:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query staking validators\n")),(0,o.kt)("p",null,"If you want to get the information of a single validator you can check it with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query staking validator <account_tenetval>\n")),(0,o.kt)("h4",{id:"bond-tokens"},"Bond Tokens"),(0,o.kt)("p",null,"On the Tenet mainnet, we delegate ",(0,o.kt)("inlineCode",{parentName:"p"},"atenet"),", where ",(0,o.kt)("inlineCode",{parentName:"p"},"1 TENET = 1e18 atenet"),". Here's how you can bond tokens to a testnet validator (",(0,o.kt)("em",{parentName:"p"},"i.e.")," delegate):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd tx staking delegate \\\n  --amount=10000000atenet \\\n  --validator=<validator> \\\n  --from=<key_name> \\\n  --chain-id=<chain_id>\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"<validator>")," is the operator address of the validator to which you intend to delegate. If you are running a local testnet, you can find this with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd keys show [name] --bech val\n")),(0,o.kt)("p",null,"where ",(0,o.kt)("inlineCode",{parentName:"p"},"[name]")," is the name of the key you specified when you initialized ",(0,o.kt)("inlineCode",{parentName:"p"},"tenetd"),"."),(0,o.kt)("p",null,"While tokens are bonded, they are pooled with all the other bonded tokens in the network. Validators and delegators obtain a percentage of shares that equal their stake in this pool."),(0,o.kt)("h5",{id:"query-delegations"},"Query Delegations"),(0,o.kt)("p",null,"Once submitted a delegation to a validator, you can see its information by using the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query staking delegation <delegator_addr> <validator_addr>\n")),(0,o.kt)("p",null,"Or if you want to check all your current delegations with distinct validators:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query staking delegations <delegator_addr>\n")),(0,o.kt)("h4",{id:"unbond-tokens"},"Unbond Tokens"),(0,o.kt)("p",null,"If for any reason the validator misbehaves, or you just want to unbond a certain\namount of tokens, use the following command."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd tx staking unbond \\\n  <validator_addr> \\\n  10atenet \\\n  --from=<key_name> \\\n  --chain-id=<chain_id>\n")),(0,o.kt)("p",null,"The unbonding will be automatically completed when the unbonding period has passed."),(0,o.kt)("h5",{id:"query-unbonding-delegations"},"Query Unbonding-Delegations"),(0,o.kt)("p",null,"Once you begin an unbonding-delegation, you can see it's information by using the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query staking unbonding-delegation <delegator_addr> <validator_addr>\n")),(0,o.kt)("p",null,"Or if you want to check all your current unbonding-delegations with disctinct validators:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query staking unbonding-delegations <account_tenet>\n")),(0,o.kt)("p",null,"Additionally, as you can get all the unbonding-delegations from a particular validator:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query staking unbonding-delegations-from <account_tenetval>\n")),(0,o.kt)("h4",{id:"redelegate-tokens"},"Redelegate Tokens"),(0,o.kt)("p",null,"A redelegation is a type delegation that allows you to bond illiquid tokens from one validator to another:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd tx staking redelegate \\\n  <src-validator-operator-addr> \\\n  <dst-validator-operator-addr> \\\n  10tenet \\\n  --from=<key_name> \\\n  --chain-id=<chain_id>\n")),(0,o.kt)("p",null,"Here you can also redelegate a specific ",(0,o.kt)("inlineCode",{parentName:"p"},"shares-amount")," or a ",(0,o.kt)("inlineCode",{parentName:"p"},"shares-fraction")," with the corresponding flags."),(0,o.kt)("p",null,"The redelegation will be automatically completed when the unbonding period has passed."),(0,o.kt)("h5",{id:"query-redelegations"},"Query Redelegations"),(0,o.kt)("p",null,"Once you begin a redelegation, you can see its information by using the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query staking redelegation <delegator_addr> <src_val_addr> <dst_val_addr>\n")),(0,o.kt)("p",null,"Or if you want to check all your current unbonding-delegations with distinct validators:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query staking redelegations <account_tenet>\n")),(0,o.kt)("p",null,"Additionally, as you can get all the outgoing redelegations from a particular validator:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"  tenetd query staking redelegations-from <account_tenetval>\n")),(0,o.kt)("h4",{id:"query-parameters-1"},"Query Parameters"),(0,o.kt)("p",null,"Parameters define high level settings for staking. You can get the current values by using:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query staking params\n")),(0,o.kt)("p",null,"With the above command you will get the values for:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Unbonding time"),(0,o.kt)("li",{parentName:"ul"},"Maximum numbers of validators"),(0,o.kt)("li",{parentName:"ul"},"Coin denomination for staking")),(0,o.kt)("p",null,"All these values will be subject to updates through a ",(0,o.kt)("inlineCode",{parentName:"p"},"governance")," process by ",(0,o.kt)("inlineCode",{parentName:"p"},"ParameterChange")," proposals."),(0,o.kt)("h4",{id:"query-pool"},"Query Pool"),(0,o.kt)("p",null,"A staking ",(0,o.kt)("inlineCode",{parentName:"p"},"Pool")," defines the dynamic parameters of the current state. You can query them with the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query staking pool\n")),(0,o.kt)("p",null,"With the ",(0,o.kt)("inlineCode",{parentName:"p"},"pool")," command you will get the values for:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Not-bonded and bonded tokens"),(0,o.kt)("li",{parentName:"ul"},"Token supply"),(0,o.kt)("li",{parentName:"ul"},"Current annual inflation and the block in which the last inflation was processed"),(0,o.kt)("li",{parentName:"ul"},"Last recorded bonded shares")),(0,o.kt)("h5",{id:"query-delegations-to-validator"},"Query Delegations To Validator"),(0,o.kt)("p",null,"You can also query all of the delegations to a particular validator:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"  tenetd query delegations-to <account_tenetval>\n")),(0,o.kt)("h3",{id:"governance"},"Governance"),(0,o.kt)("p",null,"Governance is the process from which users in the Tenet can come to consensus\non software upgrades, parameters of the mainnet or signaling mechanisms through\ntext proposals. This is done through voting on proposals, which will be submitted\nby ",(0,o.kt)("inlineCode",{parentName:"p"},"TENET")," holders on the mainnet."),(0,o.kt)("p",null,"Some considerations about the voting process:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Voting is done by bonded ",(0,o.kt)("inlineCode",{parentName:"li"},"TENET")," holders on a 1 bonded ",(0,o.kt)("inlineCode",{parentName:"li"},"TENET")," 1 vote basis"),(0,o.kt)("li",{parentName:"ul"},"Delegators inherit the vote of their validator if they don't vote"),(0,o.kt)("li",{parentName:"ul"},"Votes are tallied at the end of the voting period (2 weeks on mainnet) where\neach address can vote multiple times to update its ",(0,o.kt)("inlineCode",{parentName:"li"},"Option")," value (paying the transaction fee each time),\nonly the most recently cast vote will count as valid"),(0,o.kt)("li",{parentName:"ul"},"Voters can choose between options ",(0,o.kt)("inlineCode",{parentName:"li"},"Yes"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"No"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"NoWithVeto")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"Abstain")),(0,o.kt)("li",{parentName:"ul"},"At the end of the voting period, a proposal is accepted iff:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"(YesVotes / (YesVotes+NoVotes+NoWithVetoVotes)) > 1/2")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"(NoWithVetoVotes / (YesVotes+NoVotes+NoWithVetoVotes)) < 1/3")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"((YesVotes+NoVotes+NoWithVetoVotes) / totalBondedStake) >= quorum"))))),(0,o.kt)("p",null,"For more information about the governance process and how it works, please check\nout the Governance module ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cosmos/cosmos-sdk/tree/main/x/gov#xgov"},"specification"),"."),(0,o.kt)("h4",{id:"create-a-governance-proposal"},"Create a Governance Proposal"),(0,o.kt)("p",null,"In order to create a governance proposal, you must submit an initial deposit\nalong with a title and description. Various modules outside of governance may\nimplement their own proposal types and handlers (eg. parameter changes), where\nthe governance module itself supports ",(0,o.kt)("inlineCode",{parentName:"p"},"Text")," proposals. Any module\noutside of governance has its command mounted on top of ",(0,o.kt)("inlineCode",{parentName:"p"},"submit-proposal"),"."),(0,o.kt)("p",null,"To submit a ",(0,o.kt)("inlineCode",{parentName:"p"},"Text")," proposal:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'tenetd tx gov submit-proposal \\\n  --title=<title> \\\n  --description=<description> \\\n  --type="Text" \\\n  --deposit="1000000atenet" \\\n  --from=<name> \\\n  --chain-id=<chain_id>\n')),(0,o.kt)("p",null,"You may also provide the proposal directly through the ",(0,o.kt)("inlineCode",{parentName:"p"},"--proposal")," flag which\npoints to a JSON file containing the proposal."),(0,o.kt)("p",null,"To submit a parameter change proposal, you must provide a proposal file as its\ncontents are less friendly to CLI input:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd tx gov submit-proposal param-change <path/to/proposal.json> \\\n  --from=<name> \\\n  --chain-id=<chain_id>\n")),(0,o.kt)("p",null,"Where ",(0,o.kt)("inlineCode",{parentName:"p"},"proposal.json")," contains the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "title": "Param Change",\n  "description": "Update max validators",\n  "changes": [\n    {\n      "subspace": "staking",\n      "key": "MaxValidators",\n      "value": 105\n    }\n  ],\n  "deposit": [\n    {\n      "denom": "stake",\n      "amount": "10000000"\n    }\n  ]\n}\n')),(0,o.kt)("p",null,"::: danger Warning"),(0,o.kt)("p",null,"Currently parameter changes are ",(0,o.kt)("em",{parentName:"p"},"evaluated")," but not ",(0,o.kt)("em",{parentName:"p"},"validated"),", so it is very important\nthat any ",(0,o.kt)("inlineCode",{parentName:"p"},"value")," change is valid (ie. correct type and within bounds) for its\nrespective parameter, eg. ",(0,o.kt)("inlineCode",{parentName:"p"},"MaxValidators")," should be an integer and not a decimal."),(0,o.kt)("p",null,"Proper vetting of a parameter change proposal should prevent this from happening\n(no deposits should occur during the governance process), but it should be noted\nregardless."),(0,o.kt)("p",null,":::"),(0,o.kt)("p",null,"::: tip Note"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"SoftwareUpgrade")," is currently not supported as it's not implemented and\ncurrently does not differ from the semantics of a ",(0,o.kt)("inlineCode",{parentName:"p"},"Text")," proposal."),(0,o.kt)("p",null,":::"),(0,o.kt)("h5",{id:"query-proposals"},"Query Proposals"),(0,o.kt)("p",null,"Once created, you can now query information of the proposal:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query gov proposal <proposal_id>\n")),(0,o.kt)("p",null,"Or query all available proposals:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query gov proposals\n")),(0,o.kt)("p",null,"You can also query proposals filtered by ",(0,o.kt)("inlineCode",{parentName:"p"},"voter")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"depositor")," by using the corresponding flags."),(0,o.kt)("p",null,"To query for the proposer of a given governance proposal:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query gov proposer <proposal_id>\n")),(0,o.kt)("h4",{id:"increase-deposit"},"Increase Deposit"),(0,o.kt)("p",null,"In order for a proposal to be broadcasted to the network, the amount deposited must be above a ",(0,o.kt)("inlineCode",{parentName:"p"},"minDeposit")," value (initial value: ",(0,o.kt)("inlineCode",{parentName:"p"},"512000000atenet"),"). If the proposal you previously created didn't meet this requirement, you can still increase the total amount deposited to activate it. Once the minimum deposit is reached, the proposal enters voting period:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'tenetd tx gov deposit <proposal_id> "10000000atenet" \\\n  --from=<name> \\\n  --chain-id=<chain_id>\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("em",{parentName:"p"},"NOTE"),": Proposals that don't meet this requirement will be deleted after ",(0,o.kt)("inlineCode",{parentName:"p"},"MaxDepositPeriod")," is reached.")),(0,o.kt)("h5",{id:"query-deposits"},"Query Deposits"),(0,o.kt)("p",null,"Once a new proposal is created, you can query all the deposits submitted to it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query gov deposits <proposal_id>\n")),(0,o.kt)("p",null,"You can also query a deposit submitted by a specific address:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query gov deposit <proposal_id> <depositor_address>\n")),(0,o.kt)("h4",{id:"vote-on-a-proposal"},"Vote on a Proposal"),(0,o.kt)("p",null,"After a proposal's deposit reaches the ",(0,o.kt)("inlineCode",{parentName:"p"},"MinDeposit")," value, the voting period opens. Bonded ",(0,o.kt)("inlineCode",{parentName:"p"},"TENET")," holders can then cast vote on it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd tx gov vote <proposal_id> <Yes/No/NoWithVeto/Abstain> \\\n  --from=<name> \\\n  --chain-id=<chain_id>\n")),(0,o.kt)("h5",{id:"query-votes"},"Query Votes"),(0,o.kt)("p",null,"Check the vote with the option you just submitted:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query gov vote <proposal_id> <voter_address>\n")),(0,o.kt)("p",null,"You can also get all the previous votes submitted to the proposal with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query gov votes <proposal_id>\n")),(0,o.kt)("h4",{id:"query-proposal-tally-results"},"Query proposal tally results"),(0,o.kt)("p",null,"To check the current tally of a given proposal you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"tally")," command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query gov tally <proposal_id>\n")),(0,o.kt)("h4",{id:"query-governance-parameters"},"Query Governance Parameters"),(0,o.kt)("p",null,"To check the current governance parameters run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query gov params\n")),(0,o.kt)("p",null,"To query subsets of the governance parameters run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query gov param voting\ntenetd query gov param tallying\ntenetd query gov param deposit\n")),(0,o.kt)("h3",{id:"fee-distribution"},"Fee Distribution"),(0,o.kt)("h4",{id:"query-distribution-parameters"},"Query Distribution Parameters"),(0,o.kt)("p",null,"To check the current distribution parameters, run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query distribution params\n")),(0,o.kt)("h4",{id:"query-distribution-community-pool"},"Query distribution Community Pool"),(0,o.kt)("p",null,"To query all coins in the community pool which is under Governance control:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query distribution community-pool\n")),(0,o.kt)("h4",{id:"query-outstanding-rewards"},"Query outstanding rewards"),(0,o.kt)("p",null,"To check the current outstanding (un-withdrawn) rewards, run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query distribution outstanding-rewards\n")),(0,o.kt)("h4",{id:"query-validator-commission"},"Query Validator Commission"),(0,o.kt)("p",null,"To check the current outstanding commission for a validator, run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query distribution commission <validator_address>\n")),(0,o.kt)("h4",{id:"query-validator-slashes"},"Query Validator Slashes"),(0,o.kt)("p",null,"To check historical slashes for a validator, run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query distribution slashes <validator_address> <start_height> <end_height>\n")),(0,o.kt)("h4",{id:"query-delegator-rewards"},"Query Delegator Rewards"),(0,o.kt)("p",null,"To check current rewards for a delegation (were they to be withdrawn), run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query distribution rewards <delegator_address> <validator_address>\n")),(0,o.kt)("h4",{id:"query-all-delegator-rewards"},"Query All Delegator Rewards"),(0,o.kt)("p",null,"To check all current rewards for a delegation (were they to be withdrawn), run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd query distribution rewards <delegator_address>\n")),(0,o.kt)("h3",{id:"multisig-transactions"},"Multisig Transactions"),(0,o.kt)("p",null,"Multisig transactions require signatures of multiple private keys. Thus, generating and signing\na transaction from a multisig account involve cooperation among the parties involved. A multisig\ntransaction can be initiated by any of the key holders, and at least one of them would need to\nimport other parties' public keys into their Keybase and generate a multisig public key\nin order to finalize and broadcast the transaction."),(0,o.kt)("p",null,"For example, given a multisig key comprising the keys ",(0,o.kt)("inlineCode",{parentName:"p"},"p1"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"p2"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"p3"),", each of which is held\nby a distinct party, the user holding ",(0,o.kt)("inlineCode",{parentName:"p"},"p1")," would require to import both ",(0,o.kt)("inlineCode",{parentName:"p"},"p2")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"p3")," in order to\ngenerate the multisig account public key:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd keys add \\\n  p2 \\\n  --pubkey=tenetpub1addwnpepqtd28uwa0yxtwal5223qqr5aqf5y57tc7kk7z8qd4zplrdlk5ez5kdnlrj4\n\ntenetd keys add \\\n  p3 \\\n  --pubkey=tenetpub1addwnpepqgj04jpm9wrdml5qnss9kjxkmxzywuklnkj0g3a3f8l5wx9z4ennz84ym5t\n\ntenetd keys add \\\n  p1p2p3 \\\n  --multisig-threshold=2 \\\n  --multisig=p1,p2,p3\n")),(0,o.kt)("p",null,"A new multisig public key ",(0,o.kt)("inlineCode",{parentName:"p"},"p1p2p3")," has been stored, and its address will be\nused as signer of multisig transactions:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd keys show --address p1p2p3\n")),(0,o.kt)("p",null,"You may also view multisig threshold, pubkey constituents and respective weights\nby viewing the JSON output of the key or passing the ",(0,o.kt)("inlineCode",{parentName:"p"},"--show-multisig")," flag:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd keys show p1p2p3 -o json\n\ntenetd keys show p1p2p3 --show-multisig\n")),(0,o.kt)("p",null,"The first step to create a multisig transaction is to initiate it on behalf\nof the multisig address created above:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd tx bank send tenet1570v2fq3twt0f0x02vhxpuzc9jc4yl30q2qned 1000000atenet \\\n  --from=<multisig_address> \\\n  --generate-only > unsignedTx.json\n")),(0,o.kt)("p",null,"The file ",(0,o.kt)("inlineCode",{parentName:"p"},"unsignedTx.json")," contains the unsigned transaction encoded in JSON.\n",(0,o.kt)("inlineCode",{parentName:"p"},"p1")," can now sign the transaction with its own private key:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd tx sign \\\n  unsignedTx.json \\\n  --multisig=<multisig_address> \\\n  --from=p1 \\\n  --output-document=p1signature.json\n")),(0,o.kt)("p",null,"Once the signature is generated, ",(0,o.kt)("inlineCode",{parentName:"p"},"p1")," transmits both ",(0,o.kt)("inlineCode",{parentName:"p"},"unsignedTx.json")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"p1signature.json")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"p2")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"p3"),", which in turn will generate their\nrespective signature:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd tx sign \\\n  unsignedTx.json \\\n  --multisig=<multisig_address> \\\n  --from=p2 \\\n  --output-document=p2signature.json\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"p1p2p3")," is a 2-of-3 multisig key, therefore one additional signature\nis sufficient. Any the key holders can now generate the multisig\ntransaction by combining the required signature files:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd tx multisign \\\n  unsignedTx.json \\\n  p1p2p3 \\\n  p1signature.json p2signature.json > signedTx.json\n")),(0,o.kt)("p",null,"The transaction can now be sent to the node:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tenetd tx broadcast signedTx.json\n")))}c.isMDXComponent=!0}}]);