"use strict";(self.webpackChunktenet_docs=self.webpackChunktenet_docs||[]).push([[2129],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),h=a,f=u["".concat(c,".").concat(h)]||u[h]||d[h]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},72:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:6},i="Verify contracts on tenetscan",s={unversionedId:"tutorials/contracts-verification",id:"tutorials/contracts-verification",title:"Verify contracts on tenetscan",description:"Using hardhat",source:"@site/docs/node/tutorials/contracts-verification.md",sourceDirName:"tutorials",slug:"/tutorials/contracts-verification",permalink:"/node/tutorials/contracts-verification",draft:!1,editUrl:"https://github.com/tenet-org/tenet-docs/edit/master/docs/node/tutorials/contracts-verification.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"docsSidebar",previous:{title:"Deploy contracts",permalink:"/node/tutorials/deploy-contract"},next:{title:"Upgrades",permalink:"/node/category/upgrades"}},c={},l=[{value:"Using hardhat",id:"using-hardhat",level:2}],p={toc:l},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"verify-contracts-on-tenetscan"},"Verify contracts on tenetscan"),(0,a.kt)("h2",{id:"using-hardhat"},"Using hardhat"),(0,a.kt)("p",null,"Installation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save-dev @nomicfoundation/hardhat-verify\n")),(0,a.kt)("p",null,"And add the following statement to your hardhat.config.js:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'require("@nomicfoundation/hardhat-verify");\n')),(0,a.kt)("p",null,"Or, if you are using TypeScript, add this to your hardhat.config.ts:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'import "@nomicfoundation/hardhat-verify";\n')),(0,a.kt)("p",null,"Before verifying you should manually add the necessary information to verify your contracts on it.\nFor this you need three things: the chain id of the network, the URL of the verification endpoint,\nand the URL of the explorer."),(0,a.kt)("p",null,"You could add all Tenet networks like this to ",(0,a.kt)("inlineCode",{parentName:"p"},"hardhat.config.js")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  etherscan: {\n    apiKey: {\n      tenet: "no-key",\n      tenetTestnet: "no-key",\n      tenetDevnet: "no-key"\n    },\n    customChains: [\n      {\n        network: "tenet",\n        chainId: 1559,\n        urls: {\n          apiURL: "https://tenetscan.io/api",\n          browserURL: "https://tenetscan.io/"\n        }\n      },\n      {\n        network: "tenetTestnet",\n        chainId: 155,\n        urls: {\n          apiURL: "https://testnet.tenetscan.io/api",\n          browserURL: "https://testnet.tenetscan.io/"\n        }\n      },\n      {\n        network: "tenetDevnet",\n        chainId: 777,\n        urls: {\n          apiURL: "https://devnet.tenetscan.io/api",\n          browserURL: "https://devnet.tenetscan.io/"\n        }\n      }\n    ]\n  }\n}\n')),(0,a.kt)("p",null,"Keep in mind that the name you are giving to the network in customChains is the same one that has\nto be used in the apiKey object."),(0,a.kt)("p",null,"To see which custom chains are supported, run npx hardhat verify --list-networks."),(0,a.kt)("p",null,"Running verification:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'npx hardhat verify --network tenet DEPLOYED_CONTRACT_ADDRESS "Constructor argument 1"\n')),(0,a.kt)("p",null,"Learn more: ",(0,a.kt)("a",{parentName:"p",href:"https://hardhat.org/hardhat-runner/plugins/nomicfoundation-hardhat-verify"},"https://hardhat.org/hardhat-runner/plugins/nomicfoundation-hardhat-verify")))}d.isMDXComponent=!0}}]);