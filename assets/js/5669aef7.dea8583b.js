"use strict";(self.webpackChunktenet_docs=self.webpackChunktenet_docs||[]).push([[3203],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},d=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=l(r),p=a,f=u["".concat(s,".").concat(p)]||u[p]||h[p]||i;return r?n.createElement(f,o(o({ref:t},d),{},{components:r})):n.createElement(f,o({ref:t},d))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=p;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},1677:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const i={sidebar_position:3,title:"Chainlink Architecture"},o="Chainlink Architecture",c={unversionedId:"architecture/architecture",id:"architecture/architecture",title:"Chainlink Architecture",description:"Chainlink's architecture is designed to provide a secure and decentralized framework for connecting smart contracts with off-chain resources.",source:"@site/docs/oracle/architecture/architecture.md",sourceDirName:"architecture",slug:"/architecture/",permalink:"/oracle/architecture/",draft:!1,editUrl:"https://github.com/tenet-org/tenet-docs/edit/master/docs/oracle/architecture/architecture.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Chainlink Architecture"},sidebar:"docsSidebar",previous:{title:"Introduction to Chainlink",permalink:"/oracle/"},next:{title:"Models",permalink:"/oracle/architecture/architecture-overview/"}},s={},l=[{value:"Components",id:"components",level:2},{value:"How it Works",id:"how-it-works",level:2},{value:"Basic Request Model",id:"basic-request-model",level:2},{value:"Decentralized Data Model",id:"decentralized-data-model",level:2},{value:"Off-Chain Reporting",id:"off-chain-reporting",level:2}],d={toc:l},u="wrapper";function h(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"chainlink-architecture"},"Chainlink Architecture"),(0,a.kt)("p",null,"Chainlink's architecture is designed to provide a secure and decentralized framework for connecting smart contracts with off-chain resources."),(0,a.kt)("h2",{id:"components"},"Components"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Oracles:")," Act as data feeds for smart contracts."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Node Operators:")," Maintain the Chainlink nodes."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Aggregators:")," Combine data from different oracles to ensure accuracy.")),(0,a.kt)("h2",{id:"how-it-works"},"How it Works"),(0,a.kt)("p",null,"Chainlink utilizes a network of nodes to fetch, validate, and deliver data to smart contracts."),(0,a.kt)("h2",{id:"basic-request-model"},"Basic Request Model"),(0,a.kt)("p",null,"Chainlink connects smart contracts with external data using its decentralized oracle network. Chainlink API requests are handled 1:1 by an oracle."),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"./architecture-overview/architecture-request-model"},"Basic Request Model")," describes the on-chain architecture of requesting data from a single oracle source."),(0,a.kt)("h2",{id:"decentralized-data-model"},"Decentralized Data Model"),(0,a.kt)("p",null,"For a more robust and trustworthy answer, you can aggregate data from many oracles. With on-chain aggregation, data is aggregated from a decentralized network of independent oracle nodes. This architecture is applied to Chainlink Data Feeds, which can aggregate data such as asset price data."),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"./architecture-overview/architecture-decentralized-model"},"Decentralized Data Model")," describes how data is aggregated, and how consumer contracts can retrieve this data."),(0,a.kt)("h2",{id:"off-chain-reporting"},"Off-Chain Reporting"),(0,a.kt)("p",null,"Off-Chain Reporting (OCR) is an improvement on the decentralization and scalability of Chainlink networks. With our Off-Chain Reporting aggregators, all nodes communicate using a peer to peer network. During the communication process, a lightweight consensus algorithm runs where each node reports its price observation and signs it. A single aggregate transaction is then transmitted, which saves a significant amount of gas."))}h.isMDXComponent=!0}}]);